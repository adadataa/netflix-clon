var _ = require('lodash');
var crypto = require('crypto');
var jsonWebToken = require('jsonwebtoken');
var q = require('q');

var DEFAULT_ALGORITHMS = ['RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'ES512', 'PS256', 'PS384', 'PS512'];

module.exports = {
    decode: jsonWebToken.decode,
    verify: function (jwtToken, publicKey, algorithms) {
        var deferred = q.defer();

        var options = {
            // these are checked by jwt-claims-validator
            ignoreExpiration: true,
            ignoreNotBefore: true,
            algorithms: algorithms || DEFAULT_ALGORITHMS
        };

        jsonWebToken.verify(jwtToken, publicKey, options, function (error, claims) {
            if (error) {
                deferred.reject(error);
            } else {
                deferred.resolve(claims);
            }
        });

        return deferred.promise;
    },
    create: function (claims, options) {
        var jsonWebTokenClaims = _.merge(
            {},
            claims,
            _.omitBy({
                jti: crypto.randomBytes(20).toString('hex'),
                nbf: options.notBefore,
                iat: options.iat
            }, _.isUndefined)
        );

        var jsonWebTokenOptions = {
            algorithm: options.algorithm || 'RS256',
            expiresIn: options.expiresInSeconds || 30,
            headers: {
                kid: options.kid
            }
        };

        return jsonWebToken.sign(jsonWebTokenClaims, options.privateKey, jsonWebTokenOptions);
    }
};
